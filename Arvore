import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

# Carregar os dados do arquivo Excel
dados1 = pd.read_excel('teste.xlsx') #primeiro conjunto de dados
dados2 = pd.read_excel('teste.xlsx', sheet_name=1) #segundo conjunto de dados
dados3 = pd.read_excel('teste.xlsx', sheet_name=2) #terceiro conjunto de dados
dados4 = pd.read_excel('teste.xlsx', sheet_name=3) #quarto conjunto de dados

# as linhas com valores nulos ficam como 0 na coluna "latencia"
dados1['latencia'] = dados1['latencia'].fillna(0)

# Selecionar a coluna 'Abrir OS' do primeiro conjunto de dados, para ser a saída
y1 = dados1['abrir os']

# Selecionar a coluna latência como entrada
X1 = dados1['latencia']

# Substituir os valores menores que 17 por 0 e os maiores ou iguais a 17 por 1
X1 = np.where(X1 < 17, 0, 1)

# as linhas com valores nulos ficam como 0 na coluna "jitter"
dados2['jitter'] = dados2['jitter'].fillna(0)

# Selecionar a coluna 'Abrir OS' do segundo conjunto de dados, para ser a saída
y2 = dados2['abrir os']

# Selecionar a coluna jitter como entrada
X2 = dados2['jitter']

# Substituir os valores menores que 5 por 0 e os maiores ou iguais a 5 por 1
X2 = np.where(X2 < 5, 0, 1)

# as linhas com valores nulos ficam como 0 na coluna "perda_de_pacote"
dados3['perda_de_pacote'] = dados3['perda_de_pacote'].fillna(0)

# Substituir ',' por '.' e '%' por '' na coluna "perda_de_pacote"
dados3['perda_de_pacote'] = dados3['perda_de_pacote'].str.replace(',', '.').str.replace('%', '')

# Substituir valores não numéricos por 0 na coluna "perda_de_pacote"
dados3['perda_de_pacote'] = dados3['perda_de_pacote'].replace([np.inf, -np.inf, np.nan], 0)

# Converter a coluna para tipo numérico (float) antes de converter para inteiros
dados3['perda_de_pacote'] = (dados3['perda_de_pacote'].astype(float) * 10000).astype(int)

# Selecionar a coluna 'Abrir OS' do terceiro conjunto de dados, para ser a saída
y3 = dados3['abrir os']

# Selecionar a coluna perda_de_pacote como entrada
X3 = dados3['perda_de_pacote']

# Substituir os valores menores que 3 por 0 e os maiores ou iguais a 3 por 1
X3 = np.where(X3 < 3, 0, 1)

# as linhas com valores nulos ficam como 0 na coluna "reboots"
dados4['reboots'] = dados4['reboots'].fillna(0)

# seleciona a coluna 'Abrir OS'
y4 = dados4['abrir os']

# seleciona a coluna reboots como entrada
X4 = dados4['reboots']

# substitui os valores menores que 3 por 0 e os maiores ou iguais a 3 por 1
X4 = np.where(X4 < 3, 0, 1)

# Obtém a quantidade de linhas em cada coluna
qtd_linhas_latencia = X1.shape[0]
qtd_linhas_jitter = X2.shape[0]
qtd_linhas_perda_de_pacote = X3.shape[0]
qtd_linhas_reboots = X4.shape[0]

# Verifica se alguma coluna tem mais linhas que as outras
max_linhas = max(qtd_linhas_latencia, qtd_linhas_jitter, qtd_linhas_perda_de_pacote, qtd_linhas_reboots)
    
if qtd_linhas_latencia < max_linhas:
    # Adiciona 0 às linhas restantes na latencia
    X1 = np.append(X1, np.zeros(max_linhas - qtd_linhas_latencia))

if qtd_linhas_jitter < max_linhas:
    # Adiciona 0 às linhas restantes no jitter
    X2 = np.append(X2, np.zeros(max_linhas - qtd_linhas_jitter))

if qtd_linhas_perda_de_pacote < max_linhas:
    # Adiciona 0 às linhas restantes na perda_de_pacote
    X3 = np.append(X3, np.zeros(max_linhas - qtd_linhas_perda_de_pacote))
        
if qtd_linhas_reboots < max_linhas:
    # Adiciona 0 às linhas restantes na perda_de_pacote
    X4 = np.append(X4, np.zeros(max_linhas - qtd_linhas_reboots))
    
# Determinar o resultado final com base nos valores de "abrir os"
y = np.where((y1 == 1) | (y2 == 1) | (y3 ==1) | (y4 == 1), 1, 0) #caso uma das saídas sejam 1, o resultado será 1

# Concatenar os conjuntos de dados lado a lado
X = np.column_stack((X1, X2, X3, X4))

# Dividir os dados em 70% treinamento e 30% teste
X_treino, X_teste, y_treino, y_teste = train_test_split(X, y, test_size=0.3, random_state=42)

# Criar o classificador Árvore de Decisão
clf = DecisionTreeClassifier(random_state=42)

# Treinar o classificador com os dados de treinamento
clf.fit(X_treino, y_treino)

# Avaliar o classificador com os dados de teste
resultado = clf.predict(X_teste)

# Calcular a precisão nos dados de teste
precisao = clf.score(X_teste, y_teste)

# Imprimir os resultados
print('Precisão:', precisao * 100,'%')
print('Resultado:', resultado)